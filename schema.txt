CREATE TABLE Users (
  user_id SERIAL PRIMARY KEY,
  user_name VARCHAR(300) UNIQUE NOTNULL,
  user_email VARCHAR(300) UNIQUE NOTNULL,
  password VARCHAR(100)
);

Schema for Suppliers
CREATE TABLE suppliers (
    supplier_id SERIAL PRIMARY KEY,
    supplier_name VARCHAR(100) NOT NULL,
    contact_info VARCHAR(100),
	user_id INT NOT NULL,
	FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

Schema for items
CREATE TABLE products (
    item_id SERIAL PRIMARY KEY,
    item_name VARCHAR(200) NOT NULL,
    supplier_id INT NOT NULL,
	user_id INT NOT NUll,
    FOREIGN KEY (supplier_id) REFERENCES Suppliers (supplier_id) ON DELETE CASCADE,
	FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
);

Schema for JOINING Suppliers and items
 SELECT 
        products.item_id,
        products.item_name,
        Suppliers.supplier_name,
        Min_Stock.min_stock_level,
        Available_Stock.available_stock,
        to_order.to_order
      FROM 
        products
      INNER JOIN 
        Suppliers ON products.supplier_id = Suppliers.supplier_id
      INNER JOIN 
        Min_Stock ON products.item_id = Min_Stock.item_id
      INNER JOIN 
        Available_Stock ON products.item_id = Available_Stock.item_id
      INNER JOIN
        to_order ON products.item_id = to_order.item_id; 
//Resetting the SERIAL sequence
SELECT pg_get_serial_sequence('products', 'item_id');
ALTER SEQUENCE products_item_id_seq RESTART WITH 1;

//Schema for MIN_stock
CREATE TABLE Min_Stock (
    item_id INT PRIMARY KEY,
    min_stock_level INT,
    FOREIGN KEY (item_id) REFERENCES products (item_id) ON DELETE CASCADE
);

//Schema for order
CREATE TABLE to_order (
    item_id INT PRIMARY KEY,
    to_order INT,
	FOREIGN KEY (item_id) REFERENCES products (item_id) ON DELETE CASCADE
);